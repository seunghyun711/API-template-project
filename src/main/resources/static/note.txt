<Spring cloud Openfeign>
-> 인터페이스와 스프링 mvc 어노테이션 선언만으로 http 호출 가능한 빈을 자동으로 생성
-> 어노테이션과 인터페이스 기반으로 작성할 코드가 줄어든다.
-> 마치 스프링 jpa처럼 인터페이스에 메서드 선언하면 자동으로 구현체를 만들어주는 것과 비슷

<회원 엔티티 설계>
BaseTimeEntity : 생성시간, 수정시간을 다루는 클래스
BaseEntity : 생성자, 수정자를 다루는 클래스. BaseTimeEntity의 자식클래스로 필요시 생성시간과 수정시간 사용가능
Member : 회원 엔티티 클래스. 회원 정보에 들어갈 필드 값 정의
MemberType : enum 클래스로 회원의 로그인 타입(카카오, 네이버 등)을 명시
Role : enum 클래스로 회원의 등급(일반, 관리자) 명시

<TokenManager 구현>
TokenManager : Access, Refresh token 생성 및 검증에 대한 로직 구현
JwtTokenDto : Token 관리에 필요한 필드값이 있는 dto
GrantType : 어떤 방식으로 인증을 하는지 정보를 나타내는 enum 클래스
TokenType : 토큰의 종류를 나타내는 enum 클래스
AuthenticationException : 토큰 관련 예외처리 클래스
ErrorCode : 토큰 인증관련 에러 코드 추가
SecurityConfig : TokenManager 빈 등록

* build.gradle : jwt 의존성 추가

<소셜 로그인 구조 설계>
KakaoUSerInfoClient : 유저의 정보 불러오는 feign 인터페이스
KakaoUserInfoResponseDto : kakao 유저 정보를 처리하는 dto
KakaoLoginApiService : kakao 로그인 api 사용하는 경우 사용되는 구현 클래스
SocialLoginApiServiceFactory : 각 소셜 로그인 api를 구분하는 클래스
OAuthAttributes : 소셜 플랫폼에서 회원정보를 가져오면 반환형태가 다르다. 이걸 하나로 통일해서 해당 클래스에 있는 회원 정보를 통해 회원가입 진행하기 위한 작업을 진행한다.
SocialLgodinApiService : 소셜 플랫폼에서 회원 정보를 불러옴

<카카오 회원 정보 조회>
OauthLoginController : oauth 로그인 컨트롤러
OAuthLoginDto : 로그인 시 요청 및 응답을 위한 dto 클래
OauthLoginService : 소셜 로그인 서버로부터 회원 정보를 불러오는 클래스
OauthValidator : 필수값 체크하기 위한 클래스

<회원 가입 및 JWT 반환>
MemberRepository : JPA를 이용한 데이터 처리하는 인터페이스
MemberService : 회원 관련 로직을 구현한 클래스
DateTimeUtils : Date를 LocalDateTime 형식으로 변환

<Access Token 재발급>
AuthorizationHeaderUtils : Authorization Header 검증 클래스
TokenController : 액세스 토큰 재발급하는 요청을 하는 controller 클래스
AccessTokenResponseDto : 액세스 토큰 재발급 시 응답 필드 설정하는 DTO 클래스
TokenService : 토큰 관련 로직 - 리프레시 토큰으로 회원 찾는 로직

<로그아웃>
LogoutService : 토큰 및 토큰 타입 검증 후 로그아웃을 하는 회원의 리프레시 토큰을 만료시킴

<인증 인터셉터>
AuthenticationInterceptor : 요청하는 로직을 처리하기 전에 현재 요청하는 API에 대해 검증을 수행하는 로직
MemberInfoController : 회원 정보 조회를 요청하는 컨트롤러
MemberInfoService : MemberInfoController에 들어온 요청에 대한 처리를 하는 로직
MemberInfoResponseDto : MemberInfoController의 요청에 응답을 위한 dto 클래스

<MemberInfoArgumentResolver>
-기존에는 토큰에서 회원 아이디나 정보가 필요 시 tokenmanger를 통해 claims정보를 가져온 후 여기에서 회원과 관련된 정보를 가져와야 했다.
argumentResolver를 구현해서 컨트롤러 클래스 메서드의 파라미터로 바로 받을 수 있도록 구현한다.

MemberInfo - 회원 정보 조회 로직에 접근할 수 있도록 하는 어노테이션
MemberInfoArgumentResolver - 토큰에 있는 회원의 정보를 가져오는 로직
MemberInfoDto - 응답할 회원의 값을 담은 dto 클래스

<인가 인터셉터 구현>
액세스 토큰의 role이 ADMIN인지 검사
AdminAuthorizationInterceptor - 회원의 권한이 ADMIN이면 요청에 대한 인가 허용하고, AMDIN이 아니면 에러 발생 시키는 인터셉터 클래스
AdminTestController - 인가 테스트를 위한 컨트롤러